"use strict";!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require("jquery"),window,document):e(jQuery,window,document)}(function(e,t,i,n){var s=function(t,i){this.$chartContainer=e(t),this.opts=i,this.defaultOptions={nodeTitle:"name",nodeId:"id",toggleSiblingsResp:!1,depth:999,chartClass:"",exportButton:!1,exportFilename:"OrgChart",exportFileextension:"png",parentNodeSymbol:"fa-users",draggable:!1,direction:"t2b",pan:!1,zoom:!1,zoominLimit:7,zoomoutLimit:.5}};s.prototype={init:function(t){var i=this;this.options=e.extend({},this.defaultOptions,this.opts,t);var n=this.$chartContainer;this.$chart&&this.$chart.remove();var s=this.options.data,a=this.$chart=e("<div>",{data:{options:this.options},class:"orgchart"+(""!==this.options.chartClass?" "+this.options.chartClass:"")+("t2b"!==this.options.direction?" "+this.options.direction:""),click:function(t){e(t.target).closest(".node").length||a.find(".node.focused").removeClass("focused")}});if("undefined"!=typeof MutationObserver){var o=new MutationObserver(function(e){o.disconnect();e:for(var t=0;t<e.length;t++)for(var n=0;n<e[t].addedNodes.length;n++)if(e[t].addedNodes[n].classList.contains("orgchart")&&i.options.initCompleted&&"function"==typeof i.options.initCompleted){i.options.initCompleted(a),a.triggerHandler({type:"init.orgchart"});break e}});o.observe(n[0],{childList:!0})}if("object"===e.type(s)?s instanceof e?this.buildHierarchy(a,this.buildJsonDS(s.children()),0,this.options):this.buildHierarchy(a,this.options.ajaxURL?s:this.attachRel(s,"00"),0,this.options):(a.append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>'),e.ajax({url:s,dataType:"json"}).done(function(e,t,n){i.buildHierarchy(a,i.options.ajaxURL?e:i.attachRel(e,"00"),0,i.options)}).fail(function(e,t,i){console.log(i)}).always(function(){a.children(".spinner").remove()})),n.append(a),this.options.exportButton&&!n.find(".oc-export-btn").length){var d=e("<button>",{class:"oc-export-btn"+(""!==this.options.chartClass?" "+this.options.chartClass:""),text:"Export",click:function(e){e.preventDefault(),i.export()}});n.append(d)}return this.options.pan&&this.bindPan(),this.options.zoom&&this.bindZoom(),this},setOptions:function(e,t){return"string"==typeof e&&("pan"===e&&(t?this.bindPan():this.unbindPan()),"zoom"===e&&(t?this.bindZoom():this.unbindZoom())),"object"==typeof e&&(e.data?this.init(e):(void 0!==e.pan&&(e.pan?this.bindPan():this.unbindPan()),void 0!==e.zoom&&(e.zoom?this.bindZoom():this.unbindZoom()))),this},panStartHandler:function(t){var i=e(t.delegateTarget);if(e(t.target).closest(".node").length||t.touches&&t.touches.length>1)i.data("panning",!1);else{i.css("cursor","move").data("panning",!0);var n=0,s=0,a=i.css("transform");if("none"!==a){var o=a.split(",");-1===a.indexOf("3d")?(n=parseInt(o[4]),s=parseInt(o[5])):(n=parseInt(o[12]),s=parseInt(o[13]))}var d=0,r=0;if(t.targetTouches){if(1===t.targetTouches.length)d=t.targetTouches[0].pageX-n,r=t.targetTouches[0].pageY-s;else if(t.targetTouches.length>1)return}else d=t.pageX-n,r=t.pageY-s;i.on("mousemove touchmove",function(e){if(i.data("panning")){var t=0,n=0;if(e.targetTouches){if(1===e.targetTouches.length)t=e.targetTouches[0].pageX-d,n=e.targetTouches[0].pageY-r;else if(e.targetTouches.length>1)return}else t=e.pageX-d,n=e.pageY-r;var s=i.css("transform");if("none"===s)-1===s.indexOf("3d")?i.css("transform","matrix(1, 0, 0, 1, "+t+", "+n+")"):i.css("transform","matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, "+t+", "+n+", 0, 1)");else{var a=s.split(",");-1===s.indexOf("3d")?(a[4]=" "+t,a[5]=" "+n+")"):(a[12]=" "+t,a[13]=" "+n),i.css("transform",a.join(","))}}})}},panEndHandler:function(e){e.data.chart.data("panning")&&e.data.chart.data("panning",!1).css("cursor","default").off("mousemove")},bindPan:function(){this.$chartContainer.css("overflow","hidden"),this.$chart.on("mousedown touchstart",this.panStartHandler),e(i).on("mouseup touchend",{chart:this.$chart},this.panEndHandler)},unbindPan:function(){this.$chartContainer.css("overflow","auto"),this.$chart.off("mousedown touchstart",this.panStartHandler),e(i).off("mouseup touchend",this.panEndHandler)},zoomWheelHandler:function(e){var t=e.data.oc;e.preventDefault();var i=1+(e.originalEvent.deltaY>0?-.2:.2);t.setChartScale(t.$chart,i)},zoomStartHandler:function(e){if(e.touches&&2===e.touches.length){var t=e.data.oc;t.$chart.data("pinching",!0);var i=t.getPinchDist(e);t.$chart.data("pinchDistStart",i)}},zoomingHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){var i=t.getPinchDist(e);t.$chart.data("pinchDistEnd",i)}},zoomEndHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){t.$chart.data("pinching",!1);var i=t.$chart.data("pinchDistEnd")-t.$chart.data("pinchDistStart");i>0?t.setChartScale(t.$chart,1.2):i<0&&t.setChartScale(t.$chart,.8)}},bindZoom:function(){this.$chartContainer.on("wheel",{oc:this},this.zoomWheelHandler),this.$chartContainer.on("touchstart",{oc:this},this.zoomStartHandler),e(i).on("touchmove",{oc:this},this.zoomingHandler),e(i).on("touchend",{oc:this},this.zoomEndHandler)},unbindZoom:function(){this.$chartContainer.off("wheel",this.zoomWheelHandler),this.$chartContainer.off("touchstart",this.zoomStartHandler),e(i).off("touchmove",this.zoomingHandler),e(i).off("touchend",this.zoomEndHandler)},getPinchDist:function(e){return Math.sqrt((e.touches[0].clientX-e.touches[1].clientX)*(e.touches[0].clientX-e.touches[1].clientX)+(e.touches[0].clientY-e.touches[1].clientY)*(e.touches[0].clientY-e.touches[1].clientY))},setChartScale:function(e,i){var n=e.data("options"),s=e.css("transform"),a="",o=1;"none"===s?e.css("transform","scale("+i+","+i+")"):(a=s.split(","),-1===s.indexOf("3d")?(o=Math.abs(t.parseFloat(a[3])*i))>n.zoomoutLimit&&o<n.zoominLimit&&e.css("transform",s+" scale("+i+","+i+")"):(o=Math.abs(t.parseFloat(a[1])*i))>n.zoomoutLimit&&o<n.zoominLimit&&e.css("transform",s+" scale3d("+i+","+i+", 1)"))},buildJsonDS:function(t){var i=this,n={name:t.contents().eq(0).text().trim(),relationship:(t.parent().parent().is("li")?"1":"0")+(t.siblings("li").length?1:0)+(t.children("ul").length?1:0)};return t[0].id&&(n.id=t[0].id),t.children("ul").children().each(function(){n.children||(n.children=[]),n.children.push(i.buildJsonDS(e(this)))}),n},attachRel:function(e,t){var i=this;return e.relationship=t+(e.children&&e.children.length>0?1:0),e.children&&e.children.forEach(function(t){i.attachRel(t,"1"+(e.children.length>1?1:0))}),e},loopChart:function(t){var i=this,n=t.find("tr:first"),s={id:n.find(".node")[0].id};return n.siblings(":last").children().each(function(){s.children||(s.children=[]),s.children.push(i.loopChart(e(this)))}),s},getHierarchy:function(){return void 0===this.$chart?"Error: orgchart does not exist":this.$chart.find(".node").length?this.$chart.find(".node")[0].id?this.loopChart(this.$chart):"Error: Nodes of orghcart to be exported must have id attribute!":"Error: nodes do not exist"},getNodeState:function(e,t){var i={};if("parent"===(t=t||"self")){if((i=e.closest(".nodes").siblings(":first")).length)return i.is(".hidden")||!i.is(".hidden")&&i.closest(".nodes").is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("children"===t){if((i=e.closest("tr").siblings(":last")).length)return i.is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("siblings"===t){if((i=e.closest("table").parent().siblings()).length)return i.is(".hidden")||i.parent().is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if((i=e).length)return i.closest(".nodes").length&&i.closest(".nodes").is(".hidden")||i.closest(".table").parent().length&&i.closest(".table").parent().is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0};return{exist:!1,visible:!1}},getRelatedNodes:function(t,i){return t&&t instanceof e&&t.is(".node")?"parent"===i?t.closest(".nodes").parent().children(":first").find(".node"):"children"===i?t.closest("tr").siblings(".nodes").children().find(".node:first"):"siblings"===i?t.closest("table").parent().siblings().find(".node:first"):e():e()},hideParentEnd:function(t){e(t.target).removeClass("sliding"),t.data.upperLevel.addClass("hidden").slice(1).removeAttr("style")},hideParent:function(e){var t=e.closest(".nodes").siblings();t.eq(0).find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),this.getNodeState(e,"siblings").visible&&this.hideSiblings(e),t.slice(1).css("visibility","hidden");var i=t.eq(0).find(".node");this.getNodeState(i).visible&&i.addClass("sliding slide-down").one("transitionend",{upperLevel:t},this.hideParentEnd),this.getNodeState(i,"parent").visible&&this.hideParent(i)},showParentEnd:function(t){var i=t.data.node;e(t.target).removeClass("sliding"),this.isInAction(i)&&this.switchVerticalArrow(i.children(".topEdge"))},showParent:function(e){var t=e.closest(".nodes").siblings().removeClass("hidden");t.eq(2).children().slice(1,-1).addClass("hidden");var i=t.eq(0).find(".node");this.repaint(i[0]),i.addClass("sliding").removeClass("slide-down").one("transitionend",{node:e},this.showParentEnd.bind(this))},hideChildrenEnd:function(e){e.data.visibleNodes.removeClass("sliding"),e.data.isVerticalDesc?e.data.lowerLevel.addClass("hidden"):(e.data.visibleNodes.closest("table").closest("tr").prevAll(".lines").removeAttr("style").addClass("hidden").siblings(".nodes").addClass("hidden"),e.data.lowerLevel.last().find(".verticalNodes").addClass("hidden")),this.isInAction(e.data.node)&&this.switchVerticalArrow(e.data.node.children(".bottomEdge"))},stopAjax:function(e){e.find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1)},isVisibleNode:function(t,i){return this.getNodeState(e(i)).visible},hideChildren:function(e){var t=e.closest("tr").siblings();this.stopAjax(t.last());var i=t.last().find(".node").filter(this.isVisibleNode.bind(this)),n=!!t.last().is(".verticalNodes");n||i.closest("table").closest("tr").prevAll(".lines").css("visibility","hidden"),i.addClass("sliding slide-up").eq(0).one("transitionend",{visibleNodes:i,lowerLevel:t,isVerticalDesc:n,node:e},this.hideChildrenEnd.bind(this))},showChildren:function(e){var t=this,i=e.closest("tr").siblings(),n=!!i.is(".verticalNodes")?i.removeClass("hidden").find(".node").filter(this.isVisibleNode.bind(this)):i.removeClass("hidden").eq(2).children().find(".node:first");this.repaint(n.get(0)),n.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){n.removeClass("sliding"),t.isInAction(e)&&t.switchVerticalArrow(e.children(".bottomEdge"))})},hideSiblings:function(e,t){var i=this,n=e.closest("table").parent();n.siblings().find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),t?"left"===t?n.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"):n.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"):(n.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"),n.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"));var s=n.siblings().find(".sliding"),a=s.closest(".nodes").prevAll(".lines").css("visibility","hidden");s.eq(0).one("transitionend",function(){a.removeAttr("style");var o=t?"left"===t?n.prevAll(":not(.hidden)"):n.nextAll(":not(.hidden)"):n.siblings();n.closest(".nodes").prev().children(":not(.hidden)").slice(1,t?2*o.length+1:-1).addClass("hidden"),s.removeClass("sliding"),o.find(".node:visible:gt(0)").removeClass("slide-left slide-right").addClass("slide-up").end().find(".lines, .nodes, .verticalNodes").addClass("hidden").end().addClass("hidden"),i.isInAction(e)&&i.switchHorizontalArrow(e)})},showSiblings:function(t,i){var n=this,s=e();s=i?"left"===i?t.closest("table").parent().prevAll().removeClass("hidden"):t.closest("table").parent().nextAll().removeClass("hidden"):t.closest("table").parent().siblings().removeClass("hidden");var a=t.closest("table").closest("tr").siblings();if(i?a.eq(2).children(".hidden").slice(0,2*s.length).removeClass("hidden"):a.eq(2).children(".hidden").removeClass("hidden"),!this.getNodeState(t,"parent").visible){a.removeClass("hidden");var o=a.find(".node")[0];this.repaint(o),e(o).addClass("sliding").removeClass("slide-down").one("transitionend",function(){e(this).removeClass("sliding")})}s.find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding").removeClass("slide-left slide-right").eq(-1).one("transitionend",function(){s.find(".node").filter(this.isVisibleNode.bind(this)).removeClass("sliding"),n.isInAction(t)&&(n.switchHorizontalArrow(t),t.children(".topEdge").removeClass("fa-chevron-up").addClass("fa-chevron-down"))})},startLoading:function(t,i,n){var s=i.closest(".orgchart");return(void 0===s.data("inAjax")||!0!==s.data("inAjax"))&&(t.addClass("hidden"),i.append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>'),i.children().not(".spinner").css("opacity",.2),s.data("inAjax",!0),e(".oc-export-btn"+(""!==n.chartClass?"."+n.chartClass:"")).prop("disabled",!0),!0)},endLoading:function(t,i,n){var s=i.closest("div.orgchart");t.removeClass("hidden"),i.find(".spinner").remove(),i.children().removeAttr("style"),s.data("inAjax",!1),e(".oc-export-btn"+(""!==n.chartClass?"."+n.chartClass:"")).prop("disabled",!1)},isInAction:function(e){return e.children(".edge").attr("class").indexOf("fa-")>-1},switchVerticalArrow:function(e){e.toggleClass("fa-chevron-up").toggleClass("fa-chevron-down")},switchHorizontalArrow:function(e){var t=e.closest(".orgchart").data("options");if(t.toggleSiblingsResp&&(void 0===t.ajaxURL||e.closest(".nodes").data("siblingsLoaded"))){var i=e.closest("table").parent().prev();i.length&&(i.is(".hidden")?e.children(".leftEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"):e.children(".leftEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"));var n=e.closest("table").parent().next();n.length&&(n.is(".hidden")?e.children(".rightEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"):e.children(".rightEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"))}else{var s=e.closest("table").parent().siblings(),a=!!s.length&&!s.is(".hidden");e.children(".leftEdge").toggleClass("fa-chevron-right",a).toggleClass("fa-chevron-left",!a),e.children(".rightEdge").toggleClass("fa-chevron-left",a).toggleClass("fa-chevron-right",!a)}},repaint:function(e){e&&(e.style.offsetWidth=e.offsetWidth)},createNode:function(n,s,a){var o=this;n.children||(n.children=[]),e.each(n.children,function(e,t){t.parentId=n.id});var d=e.Deferred(),r=e("<div"+(a.draggable?' draggable="true"':"")+(n[a.nodeId]?' id="'+n[a.nodeId]+'"':"")+(n.parentId?' data-parent="'+n.parentId+'"':"")+">").addClass("node "+(n.className||"")+(s>=a.depth?" slide-up":""));a.nodeTemplate?r.append(a.nodeTemplate(n)):r.append('<div class="title">'+n[a.nodeTitle]+"</div>").append(void 0!==a.nodeContent?'<div class="content">'+(n[a.nodeContent]||"")+"</div>":"");var l=n.relationship||"";if(a.verticalDepth&&s+2>a.verticalDepth){if(s+1>=a.verticalDepth&&Number(l.substr(2,1))){var c=s+1>=a.depth?"plus":"minus";r.append('<i class="toggleBtn fa fa-'+c+'-square"></i>')}}else Number(l.substr(0,1))&&r.append('<i class="edge verticalEdge topEdge fa"></i>'),Number(l.substr(1,1))&&r.append('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),Number(l.substr(2,1))&&r.append('<i class="edge verticalEdge bottomEdge fa"></i>').children(".title").prepend('<i class="fa '+a.parentNodeSymbol+' symbol"></i>');return r.on("mouseenter mouseleave",function(t){var i=e(this),n=!1,s=i.children(".topEdge"),a=(i.children(".rightEdge"),i.children(".bottomEdge")),d=i.children(".leftEdge");"mouseenter"===t.type?(s.length&&(n=o.getNodeState(i,"parent").visible,s.toggleClass("fa-chevron-up",!n).toggleClass("fa-chevron-down",n)),a.length&&(n=o.getNodeState(i,"children").visible,a.toggleClass("fa-chevron-down",!n).toggleClass("fa-chevron-up",n)),d.length&&o.switchHorizontalArrow(i)):i.children(".edge").removeClass("fa-chevron-up fa-chevron-down fa-chevron-right fa-chevron-left")}),r.on("click",function(t){e(this).closest(".orgchart").find(".focused").removeClass("focused"),e(this).addClass("focused")}),r.on("click",".topEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"parent");if(d.exist){var r=s.closest("table").closest("tr").siblings(":first").find(".node");if(r.is(".sliding"))return;d.visible?(o.hideParent(s),r.one("transitionend",function(){o.isInAction(s)&&(o.switchVerticalArrow(i),o.switchHorizontalArrow(s))})):o.showParent(s)}else{var l=i.parent()[0].id;o.startLoading(i,s,a)&&e.ajax({url:e.isFunction(a.ajaxURL.parent)?a.ajaxURL.parent(n):a.ajaxURL.parent+l,dataType:"json"}).done(function(t){s.closest(".orgchart").data("inAjax")&&(e.isEmptyObject(t)||o.addParent(s,t,a))}).fail(function(){console.log("Failed to get parent node data")}).always(function(){o.endLoading(i,s,a)})}}),r.on("click",".bottomEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"children");if(d.exist){if(s.closest("tr").siblings(":last").find(".node:visible").is(".sliding"))return;d.visible?o.hideChildren(s):o.showChildren(s)}else{var r=i.parent()[0].id;o.startLoading(i,s,a)&&e.ajax({url:e.isFunction(a.ajaxURL.children)?a.ajaxURL.children(n):a.ajaxURL.children+r,dataType:"json"}).done(function(t,i,n){s.closest(".orgchart").data("inAjax")&&t.children.length&&o.addChildren(s,t,e.extend({},a,{depth:0}))}).fail(function(e,t,i){console.log("Failed to get children nodes data")}).always(function(){o.endLoading(i,s,a)})}}),r.on("click",".toggleBtn",function(t){var i=e(this),n=i.parent().next(),s=n.find(".node"),a=n.children().children(".node");a.is(".sliding")||(i.toggleClass("fa-plus-square fa-minus-square"),s.eq(0).is(".slide-up")?(n.removeClass("hidden"),o.repaint(a.get(0)),a.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){a.removeClass("sliding")})):(s.addClass("sliding slide-up").eq(0).one("transitionend",function(){s.removeClass("sliding"),s.closest("ul").addClass("hidden")}),s.find(".toggleBtn").removeClass("fa-minus-square").addClass("fa-plus-square")))}),r.on("click",".leftEdge, .rightEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"siblings");if(d.exist){if(s.closest("table").parent().siblings().find(".node:visible").is(".sliding"))return;if(a.toggleSiblingsResp){var r=s.closest("table").parent().prev(),l=s.closest("table").parent().next();i.is(".leftEdge")?r.is(".hidden")?o.showSiblings(s,"left"):o.hideSiblings(s,"left"):l.is(".hidden")?o.showSiblings(s,"right"):o.hideSiblings(s,"right")}else d.visible?o.hideSiblings(s):o.showSiblings(s)}else{var c=i.parent()[0].id,h=o.getNodeState(s,"parent").exist?e.isFunction(a.ajaxURL.siblings)?a.ajaxURL.siblings(n):a.ajaxURL.siblings+c:e.isFunction(a.ajaxURL.families)?a.ajaxURL.families(n):a.ajaxURL.families+c;o.startLoading(i,s,a)&&e.ajax({url:h,dataType:"json"}).done(function(e,t,i){s.closest(".orgchart").data("inAjax")&&(e.siblings||e.children)&&o.addSiblings(s,e,a)}).fail(function(e,t,i){console.log("Failed to get sibling nodes data")}).always(function(){o.endLoading(i,s,a)})}}),a.draggable&&r.on("dragstart",function(n){var s=n.originalEvent,o=/firefox/.test(t.navigator.userAgent.toLowerCase());if(o&&s.dataTransfer.setData("text/html","hack for firefox"),"none"!==r.closest(".orgchart").css("transform")){var d,l;i.querySelector(".ghost-node")?(d=r.closest(".orgchart").children(".ghost-node").get(0),l=e(d).children().get(0)):((d=i.createElementNS("http://www.w3.org/2000/svg","svg")).classList.add("ghost-node"),l=i.createElementNS("http://www.w3.org/2000/svg","rect"),d.appendChild(l),r.closest(".orgchart").append(d));var c=r.closest(".orgchart").css("transform").split(","),h=Math.abs(t.parseFloat("t2b"===a.direction||"b2t"===a.direction?c[0].slice(c[0].indexOf("(")+1):c[1]));d.setAttribute("width",r.outerWidth(!1)),d.setAttribute("height",r.outerHeight(!1)),l.setAttribute("x",5*h),l.setAttribute("y",5*h),l.setAttribute("width",120*h),l.setAttribute("height",40*h),l.setAttribute("rx",4*h),l.setAttribute("ry",4*h),l.setAttribute("stroke-width",1*h);var g=s.offsetX*h,f=s.offsetY*h;if("l2r"===a.direction?(g=s.offsetY*h,f=s.offsetX*h):"r2l"===a.direction?(g=r.outerWidth(!1)-s.offsetY*h,f=s.offsetX*h):"b2t"===a.direction&&(g=r.outerWidth(!1)-s.offsetX*h,f=r.outerHeight(!1)-s.offsetY*h),o){l.setAttribute("fill","rgb(255, 255, 255)"),l.setAttribute("stroke","rgb(191, 0, 0)");var p=i.createElement("img");p.src="data:image/svg+xml;utf8,"+(new XMLSerializer).serializeToString(d),s.dataTransfer.setDragImage(p,g,f)}else s.dataTransfer.setDragImage(d,g,f)}var v=e(this),u=v.closest(".nodes").siblings().eq(0).find(".node:first"),b=v.closest("table").find(".node");v.closest(".orgchart").data("dragged",v).find(".node").each(function(t,i){-1===b.index(i)&&(a.dropCriteria?a.dropCriteria(v,u,e(i))&&e(i).addClass("allowedDrop"):e(i).addClass("allowedDrop"))})}).on("dragover",function(t){t.preventDefault(),e(this).is(".allowedDrop")||(t.originalEvent.dataTransfer.dropEffect="none")}).on("dragend",function(t){e(this).closest(".orgchart").find(".allowedDrop").removeClass("allowedDrop")}).on("drop",function(t){var i=e(this),n=i.closest(".orgchart"),s=n.data("dragged"),a=s.closest(".nodes").siblings().eq(0).children(),o=e.Event("nodedrop.orgchart");if(n.trigger(o,{draggedNode:s,dragZone:a.children(),dropZone:i}),!o.isDefaultPrevented()){if(i.closest("tr").siblings().length){var d=parseInt(i.parent().attr("colspan"))+2,r='<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>';i.closest("tr").next().addBack().children().attr("colspan",d),s.find(".horizontalEdge").length||s.append(r),i.closest("tr").siblings().eq(1).children(":last").before('<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>').end().next().append(s.closest("table").parent());var l=s.closest("table").parent().siblings().find(".node:first");1===l.length&&l.append(r)}else i.append('<i class="edge verticalEdge bottomEdge fa"></i>').parent().attr("colspan",2).parent().after('<tr class="lines"><td colspan="2"><div class="downLine"></div></td></tr><tr class="lines"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr><tr class="nodes"></tr>').siblings(":last").append(s.find(".horizontalEdge").remove().end().closest("table").parent());var c=parseInt(a.attr("colspan"));if(c>2){a.attr("colspan",c-2).parent().next().children().attr("colspan",c-2).end().next().children().slice(1,3).remove();var h=a.parent().siblings(".nodes").children().find(".node:first");1===h.length&&h.find(".horizontalEdge").remove()}else a.removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove()}}),a.createNode&&a.createNode(r,n),d.resolve(r),d.promise()},buildHierarchy:function(t,i,n,s,a){var o,d=this,r=i.children,l=!!r&&r.length,c=!!(s.verticalDepth&&n+1>=s.verticalDepth);if(Object.keys(i).length>1&&(o=c?t:e("<table>"),c||t.append(o),e.when(this.createNode(i,n,s)).done(function(e){c?o.append(e):o.append(e.wrap("<tr><td"+(l?' colspan="'+2*r.length+'"':"")+"></td></tr>").closest("tr")),a&&a()}).fail(function(){console.log("Failed to creat node")})),l){1===Object.keys(i).length&&(o=t);var h=n+1>=s.depth||i.collapsed?" hidden":"",g=!!(s.verticalDepth&&n+2>=s.verticalDepth);g||o.append('<tr class="lines'+h+'"><td colspan="'+2*r.length+'"><div class="downLine"></div></td></tr>');for(var f='<tr class="lines'+h+'"><td class="rightLine">&nbsp;</td>',p=1;p<r.length;p++)f+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';f+='<td class="leftLine">&nbsp;</td></tr>';var v;g?(v=e("<ul>"),h&&v.addClass(h),n+2===s.verticalDepth?o.append('<tr class="verticalNodes'+h+'"><td></td></tr>').find(".verticalNodes").children().append(v):o.append(v)):(v=e('<tr class="nodes'+h+'">'),o.append(f).append(v)),e.each(r,function(){var t=e(g?"<li>":'<td colspan="2">');v.append(t),d.buildHierarchy(t,this,n+1,s,a)})}},buildChildNode:function(e,t,i,n){var i=i||e.closest(".orgchart").data("options"),s=t.children||t.siblings;e.find("td:first").attr("colspan",2*s.length),this.buildHierarchy(e,{children:s},0,i,n)},addChildren:function(e,t,i){var n=this,i=i||e.closest(".orgchart").data("options"),s=0;this.buildChildNode(e.closest("table"),t,i,function(){++s===t.children.length&&(e.children(".bottomEdge").length||e.append('<i class="edge verticalEdge bottomEdge fa"></i>'),e.find(".symbol").length||e.children(".title").prepend('<i class="fa '+i.parentNodeSymbol+' symbol"></i>'),n.showChildren(e))})},buildParentNode:function(t,i,n,s){var a=this,o=e("<table>");i.relationship=i.relationship||"001",e.when(this.createNode(i,0,n||t.closest(".orgchart").data("options"))).done(function(e){o.append(e.removeClass("slide-up").addClass("slide-down").wrap('<tr class="hidden"><td colspan="2"></td></tr>').closest("tr")),o.append('<tr class="lines hidden"><td colspan="2"><div class="downLine"></div></td></tr>');o.append('<tr class="lines hidden"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr>');var t=a.$chart;t.prepend(o).children("table:first").append('<tr class="nodes"><td colspan="2"></td></tr>').children("tr:last").children().append(t.children("table").last()),s()}).fail(function(){console.log("Failed to create parent node")})},addParent:function(e,t,i){var n=this;this.buildParentNode(e,t,i,function(){e.children(".topEdge").length||e.children(".title").after('<i class="edge verticalEdge topEdge fa"></i>'),n.showParent(e)})},complementLine:function(e,t,i){for(var n="",s=0;s<i;s++)n+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';e.parent().prevAll("tr:gt(0)").children().attr("colspan",2*t).end().next().children(":first").after(n)},buildSiblingNode:function(t,i,n,s){var a=this,n=n||t.closest(".orgchart").data("options"),o=i.siblings?i.siblings.length:i.children.length,d=t.parent().is("td")?t.closest("tr").children().length:1,r=d+o,l=r>1?Math.floor(r/2-1):0;if(t.parent().is("td")){t.closest("tr").prevAll("tr:last");t.closest("tr").prevAll("tr:lt(2)").remove();var c=0;this.buildChildNode(t.parent().closest("table"),i,n,function(){if(++c===o){var e=t.parent().closest("table").children("tr:last").children("td");d>1?(a.complementLine(e.eq(0).before(t.closest("td").siblings().addBack().unwrap()),r,d),e.addClass("hidden").find(".node").addClass("slide-left")):(a.complementLine(e.eq(l).after(t.closest("td").unwrap()),r,1),e.not(":eq("+l+"1)").addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left")),s()}})}else{var h=0;this.buildHierarchy(t.closest(".orgchart"),i,0,n,function(){++h===r&&(a.complementLine(t.next().children("tr:last").children().eq(l).after(e('<td colspan="2">').append(t)),r,1),t.closest("tr").siblings().eq(0).addClass("hidden").find(".node").addClass("slide-down"),t.parent().siblings().addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left"),s())})}},addSiblings:function(e,t,i){var n=this;this.buildSiblingNode(e.closest("table"),t,i,function(){e.closest(".nodes").data("siblingsLoaded",!0),e.children(".leftEdge").length||e.children(".topEdge").after('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),n.showSiblings(e)})},removeNodes:function(e){var t=e.closest("table").parent(),i=t.parent().siblings();t.is("td")?this.getNodeState(e,"siblings").exist?(i.eq(2).children(".topLine:lt(2)").remove(),i.slice(0,2).children().attr("colspan",i.eq(2).children().length),t.remove()):i.eq(0).children().removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove():t.add(t.siblings()).remove()},export:function(n,s){var a=this;if(n=void 0!==n?n:this.options.exportFilename,s=void 0!==s?s:this.options.exportFileextension,e(this).children(".spinner").length)return!1;var o=this.$chartContainer,d=o.find(".mask");d.length?d.removeClass("hidden"):o.append('<div class="mask"><i class="fa fa-circle-o-notch fa-spin spinner"></i></div>');var r=o.addClass("canvasContainer").find(".orgchart:visible").get(0),l="l2r"===a.options.direction||"r2l"===a.options.direction;html2canvas(r,{width:l?r.clientHeight:r.clientWidth,height:l?r.clientWidth:r.clientHeight,onclone:function(t){e(t).find(".canvasContainer").css("overflow","visible").find(".orgchart:visible:first").css("transform","")},onrendered:function(e){if(o.find(".mask").addClass("hidden"),"pdf"===s.toLowerCase()){var d={},r=Math.floor(.2646*e.width),l=Math.floor(.2646*e.height);(d=r>l?new jsPDF("l","mm",[r,l]):new jsPDF("p","mm",[l,r])).addImage(e.toDataURL(),"png",0,0),d.save(n+".pdf")}else{var c="WebkitAppearance"in i.documentElement.style,h=!!t.sidebar,g="Microsoft Internet Explorer"===navigator.appName||"Netscape"===navigator.appName&&navigator.appVersion.indexOf("Edge")>-1;if(!c&&!h||g)t.navigator.msSaveBlob(e.msToBlob(),n+".png");else{var f=".oc-download-btn"+(""!==a.options.chartClass?"."+a.options.chartClass:"");o.find(f).length||o.append('<a class="oc-download-btn'+(""!==a.options.chartClass?" "+a.options.chartClass:"")+'" download="'+n+'.png"></a>'),o.find(f).attr("href",e.toDataURL())[0].click()}}}}).then(function(){o.removeClass("canvasContainer")},function(){o.removeClass("canvasContainer")})}},e.fn.orgchart=function(e){return new s(this,e).init()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
